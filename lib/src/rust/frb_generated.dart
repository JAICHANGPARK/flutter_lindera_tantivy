// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/search.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';


                /// Main entrypoint of the Rust API
                class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
                  @internal
                  static final instance = RustLib._();

                  RustLib._();

                  /// Initialize flutter_rust_bridge
                  static Future<void> init({
                    RustLibApi? api,
                    BaseHandler? handler,
                    ExternalLibrary? externalLibrary,
                    bool forceSameCodegenVersion = true,
                  }) async {
                    await instance.initImpl(
                      api: api,
                      handler: handler,
                      externalLibrary: externalLibrary,
                      forceSameCodegenVersion: forceSameCodegenVersion,
                    );
                  }

                  /// Initialize flutter_rust_bridge in mock mode.
                  /// No libraries for FFI are loaded.
                  static void initMock({
                    required RustLibApi api,
                  }) {
                    instance.initMockImpl(
                      api: api,
                    );
                  }

                  /// Dispose flutter_rust_bridge
                  ///
                  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
                  /// is automatically disposed when the app stops.
                  static void dispose() => instance.disposeImpl();

                  @override
                  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

                  @override
                  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

                  @override
                  Future<void> executeRustInitializers() async {
                    await api.crateApiSimpleInitApp();

                  }

                  @override
                  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

                  @override
                  String get codegenVersion => '2.11.1';

                  @override
                  int get rustContentHash => 1888559858;

                  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
                    stem: 'rust_lib_tantivy_flutter_app',
                    ioDirectory: 'rust/target/release/',
                    webPrefix: 'pkg/',
                  );
                }
                

                abstract class RustLibApi extends BaseApi {
                  String crateApiSearchAddDocument({required String title , required String body , required String metadataJson });

String crateApiSearchAddDocuments({required List<DocumentInput> documents });

String crateApiSearchClearAllDocuments();

String crateApiSearchDeleteDocument({required String id });

String crateApiSearchDeleteDocuments({required List<String> ids });

BigInt crateApiSearchGetDocumentCount();

String crateApiSimpleGreet({required String name });

String crateApiSearchIndexSampleDocuments();

Future<void> crateApiSimpleInitApp();

String crateApiSearchInitializeSearchIndex();

String crateApiSearchInitializeSearchIndexWithPath({required String indexPath });

List<SearchResult> crateApiSearchSearchDocuments({required String queryStr , required BigInt limit });

String crateApiSearchUpdateDocument({required String id , required String title , required String body , required String metadataJson });


                }
                

                class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
                  RustLibApiImpl({
                    required super.handler,
                    required super.wire,
                    required super.generalizedFrbRustBinding,
                    required super.portManager,
                  });

                  @override String crateApiSearchAddDocument({required String title , required String body , required String metadataJson })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(title, serializer);
sse_encode_String(body, serializer);
sse_encode_String(metadataJson, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchAddDocumentConstMeta,
            argValues: [title, body, metadataJson],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchAddDocumentConstMeta => const TaskConstMeta(
            debugName: "add_document",
            argNames: ["title", "body", "metadataJson"],
        );
        

@override String crateApiSearchAddDocuments({required List<DocumentInput> documents })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_list_document_input(documents, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchAddDocumentsConstMeta,
            argValues: [documents],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchAddDocumentsConstMeta => const TaskConstMeta(
            debugName: "add_documents",
            argNames: ["documents"],
        );
        

@override String crateApiSearchClearAllDocuments()  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchClearAllDocumentsConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchClearAllDocumentsConstMeta => const TaskConstMeta(
            debugName: "clear_all_documents",
            argNames: [],
        );
        

@override String crateApiSearchDeleteDocument({required String id })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(id, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchDeleteDocumentConstMeta,
            argValues: [id],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchDeleteDocumentConstMeta => const TaskConstMeta(
            debugName: "delete_document",
            argNames: ["id"],
        );
        

@override String crateApiSearchDeleteDocuments({required List<String> ids })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_list_String(ids, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchDeleteDocumentsConstMeta,
            argValues: [ids],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchDeleteDocumentsConstMeta => const TaskConstMeta(
            debugName: "delete_documents",
            argNames: ["ids"],
        );
        

@override BigInt crateApiSearchGetDocumentCount()  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchGetDocumentCountConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchGetDocumentCountConstMeta => const TaskConstMeta(
            debugName: "get_document_count",
            argNames: [],
        );
        

@override String crateApiSimpleGreet({required String name })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(name, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiSimpleGreetConstMeta,
            argValues: [name],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
            debugName: "greet",
            argNames: ["name"],
        );
        

@override String crateApiSearchIndexSampleDocuments()  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchIndexSampleDocumentsConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchIndexSampleDocumentsConstMeta => const TaskConstMeta(
            debugName: "index_sample_documents",
            argNames: [],
        );
        

@override Future<void> crateApiSimpleInitApp()  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiSimpleInitAppConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
            debugName: "init_app",
            argNames: [],
        );
        

@override String crateApiSearchInitializeSearchIndex()  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchInitializeSearchIndexConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchInitializeSearchIndexConstMeta => const TaskConstMeta(
            debugName: "initialize_search_index",
            argNames: [],
        );
        

@override String crateApiSearchInitializeSearchIndexWithPath({required String indexPath })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(indexPath, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchInitializeSearchIndexWithPathConstMeta,
            argValues: [indexPath],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchInitializeSearchIndexWithPathConstMeta => const TaskConstMeta(
            debugName: "initialize_search_index_with_path",
            argNames: ["indexPath"],
        );
        

@override List<SearchResult> crateApiSearchSearchDocuments({required String queryStr , required BigInt limit })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(queryStr, serializer);
sse_encode_usize(limit, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_search_result,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchSearchDocumentsConstMeta,
            argValues: [queryStr, limit],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchSearchDocumentsConstMeta => const TaskConstMeta(
            debugName: "search_documents",
            argNames: ["queryStr", "limit"],
        );
        

@override String crateApiSearchUpdateDocument({required String id , required String title , required String body , required String metadataJson })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(id, serializer);
sse_encode_String(title, serializer);
sse_encode_String(body, serializer);
sse_encode_String(metadataJson, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiSearchUpdateDocumentConstMeta,
            argValues: [id, title, body, metadataJson],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiSearchUpdateDocumentConstMeta => const TaskConstMeta(
            debugName: "update_document",
            argNames: ["id", "title", "body", "metadataJson"],
        );
        



                  @protected String dco_decode_String(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as String; }

@protected DocumentInput dco_decode_document_input(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
                return DocumentInput(id: dco_decode_String(arr[0]),
title: dco_decode_String(arr[1]),
body: dco_decode_String(arr[2]),
metadata: dco_decode_String(arr[3]),); }

@protected double dco_decode_f_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as double; }

@protected List<String> dco_decode_list_String(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_String).toList(); }

@protected List<DocumentInput> dco_decode_list_document_input(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_document_input).toList(); }

@protected Uint8List dco_decode_list_prim_u_8_strict(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as Uint8List; }

@protected List<SearchResult> dco_decode_list_search_result(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_search_result).toList(); }

@protected SearchResult dco_decode_search_result(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
                return SearchResult(id: dco_decode_String(arr[0]),
title: dco_decode_String(arr[1]),
body: dco_decode_String(arr[2]),
score: dco_decode_f_32(arr[3]),
metadata: dco_decode_String(arr[4]),); }

@protected BigInt dco_decode_u_64(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dcoDecodeU64(raw); }

@protected int dco_decode_u_8(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected void dco_decode_unit(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return; }

@protected BigInt dco_decode_usize(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dcoDecodeU64(raw); }

@protected String sse_decode_String(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_prim_u_8_strict(deserializer);
        return utf8.decoder.convert(inner); }

@protected DocumentInput sse_decode_document_input(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_id = sse_decode_String(deserializer);
var var_title = sse_decode_String(deserializer);
var var_body = sse_decode_String(deserializer);
var var_metadata = sse_decode_String(deserializer);
return DocumentInput(id: var_id, title: var_title, body: var_body, metadata: var_metadata); }

@protected double sse_decode_f_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getFloat32(); }

@protected List<String> sse_decode_list_String(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <String>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_String(deserializer)); }
        return ans_;
         }

@protected List<DocumentInput> sse_decode_list_document_input(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <DocumentInput>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_document_input(deserializer)); }
        return ans_;
         }

@protected Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var len_ = sse_decode_i_32(deserializer);
                return deserializer.buffer.getUint8List(len_); }

@protected List<SearchResult> sse_decode_list_search_result(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <SearchResult>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_search_result(deserializer)); }
        return ans_;
         }

@protected SearchResult sse_decode_search_result(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_id = sse_decode_String(deserializer);
var var_title = sse_decode_String(deserializer);
var var_body = sse_decode_String(deserializer);
var var_score = sse_decode_f_32(deserializer);
var var_metadata = sse_decode_String(deserializer);
return SearchResult(id: var_id, title: var_title, body: var_body, score: var_score, metadata: var_metadata); }

@protected BigInt sse_decode_u_64(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getBigUint64(); }

@protected int sse_decode_u_8(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8(); }

@protected void sse_decode_unit(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected BigInt sse_decode_usize(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getBigUint64(); }

@protected int sse_decode_i_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getInt32(); }

@protected bool sse_decode_bool(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8() != 0; }

@protected void sse_encode_String(String self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer); }

@protected void sse_encode_document_input(DocumentInput self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_String(self.id, serializer);
sse_encode_String(self.title, serializer);
sse_encode_String(self.body, serializer);
sse_encode_String(self.metadata, serializer);
 }

@protected void sse_encode_f_32(double self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putFloat32(self); }

@protected void sse_encode_list_String(List<String> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_String(item, serializer); } }

@protected void sse_encode_list_document_input(List<DocumentInput> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_document_input(item, serializer); } }

@protected void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
                    serializer.buffer.putUint8List(self); }

@protected void sse_encode_list_search_result(List<SearchResult> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_search_result(item, serializer); } }

@protected void sse_encode_search_result(SearchResult self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_String(self.id, serializer);
sse_encode_String(self.title, serializer);
sse_encode_String(self.body, serializer);
sse_encode_f_32(self.score, serializer);
sse_encode_String(self.metadata, serializer);
 }

@protected void sse_encode_u_64(BigInt self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putBigUint64(self); }

@protected void sse_encode_u_8(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self); }

@protected void sse_encode_unit(void self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected void sse_encode_usize(BigInt self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putBigUint64(self); }

@protected void sse_encode_i_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putInt32(self); }

@protected void sse_encode_bool(bool self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self ? 1 : 0); }
                }
                
